// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@index([provider, providerAccountId])
  @@index([userId, provider])
  @@map(name: "accounts")
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
//   @@map(name: "sessions")
// }
enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String?                 @unique
  emailVerified         DateTime?
  password              String?
  role                  UserRole                @default(USER)
  image                 String?
  accounts              Account[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  // sessions      Session[]
  isTwoFactorEnabled    Boolean                 @default(false)
  TwoFactorConfirmation TwoFactorConfirmation[]

  @@map(name: "users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  email   String?
  expires DateTime

  @@unique([email, token])
  @@map(name: "verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String   @unique
  email   String?
  expires DateTime

  @@unique([email, token])
  @@map(name: "password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  token   String   @unique
  email   String?
  expires DateTime

  @@unique([email, token])
  @@map(name: "two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map(name: "two_factor_confirmations")
}
